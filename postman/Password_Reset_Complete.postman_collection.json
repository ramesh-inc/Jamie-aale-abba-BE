{
	"info": {
		"_postman_id": "password-reset-complete-collection",
		"name": "Password Reset - Complete Flow",
		"description": "Complete password reset flow testing:\n\n1. POST /auth/forgot-password/ - Request password reset\n2. GET /auth/validate-reset-token/{token}/ - Validate reset token\n3. POST /auth/reset-password/ - Reset password with token\n\nNote: Email functionality testing requires a valid SMTP server configuration.\nFor testing, check server logs for the generated reset links.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"http://localhost:8000\");",
					"}",
					"",
					"// Set test email if not set",
					"if (!pm.environment.get(\"test_email\")) {",
					"    pm.environment.set(\"test_email\", \"test@example.com\");",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"item": [
		{
			"name": "Password Reset Request",
			"item": [
				{
					"name": "Request Password Reset - Valid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson.message).to.include('password reset');",
									"});",
									"",
									"// Note: In a real test environment, you would check the email",
									"// or server logs for the reset token",
									"console.log('Check server logs or email for reset token');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "forgot-password", ""]
						}
					}
				},
				{
					"name": "Request Password Reset - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nonexistent@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "forgot-password", ""]
						}
					}
				},
				{
					"name": "Request Password Reset - Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "forgot-password", ""]
						}
					}
				},
				{
					"name": "Request Password Reset - Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email-format\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "forgot-password", ""]
						}
					}
				}
			]
		},
		{
			"name": "Token Validation",
			"item": [
				{
					"name": "Validate Reset Token - Valid Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// For testing, you would set a real token here",
									"// This token should be obtained from the email or server logs",
									"if (!pm.environment.get(\"reset_token\")) {",
									"    pm.environment.set(\"reset_token\", \"sample-uuid-token-here\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Note: This will fail with sample token",
									"// Replace with actual token from email/logs",
									"if (pm.environment.get(\"reset_token\") === \"sample-uuid-token-here\") {",
									"    pm.test(\"Status code is 404 (expected with sample token)\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Token is valid\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('valid');",
									"        pm.expect(responseJson.valid).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate-reset-token/{{reset_token}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate-reset-token", "{{reset_token}}", ""]
						}
					}
				},
				{
					"name": "Validate Reset Token - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response indicates invalid token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate-reset-token/invalid-token-12345/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate-reset-token", "invalid-token-12345", ""]
						}
					}
				}
			]
		},
		{
			"name": "Password Reset Confirmation",
			"item": [
				{
					"name": "Reset Password - Valid Token and Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Note: This will fail with sample token",
									"// Replace with actual token from email/logs",
									"if (pm.environment.get(\"reset_token\") === \"sample-uuid-token-here\") {",
									"    pm.test(\"Status code is 400 (expected with sample token)\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"} else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Password reset successful\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"        pm.expect(responseJson.message).to.include('success');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"NewSecurePassword123!\",\n    \"confirm_password\": \"NewSecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "reset-password", ""]
						}
					}
				},
				{
					"name": "Reset Password - Password Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has password mismatch error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('error');",
									"    pm.expect(responseJson.error).to.include('match');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"Password123!\",\n    \"confirm_password\": \"DifferentPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "reset-password", ""]
						}
					}
				},
				{
					"name": "Reset Password - Weak Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has password validation error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('new_password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"123\",\n    \"confirm_password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "reset-password", ""]
						}
					}
				},
				{
					"name": "Reset Password - Missing Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation errors\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"new_password\": \"ValidPassword123!\",\n    \"confirm_password\": \"ValidPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "reset-password", ""]
						}
					}
				}
			]
		},
		{
			"name": "Integration Test Flow",
			"item": [
				{
					"name": "Complete Flow - Test Login After Reset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This test should only run after a successful password reset",
									"// It attempts to login with the new password"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This test will only pass if password was actually reset",
									"pm.test(\"Status code is 200 or appropriate error\", function () {",
									"    pm.expect([200, 401]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Login successful with new password\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('access');",
									"    });",
									"} else {",
									"    console.log('Login failed - either password not reset or test password is incorrect');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"NewSecurePassword123!\",\n    \"user_type\": \"parent\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login", ""]
						}
					}
				}
			]
		}
	]
}